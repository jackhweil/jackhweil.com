#!/bin/bash

PROG_NAME=$(basename "$0")

help_menu () {
cat << EOF
Usage: ${PROG_NAME} -i=<input-dir> -o=<output-dir>

Options:
-h, --help    display this screen

Params:
<input-dir>   directory to recursively search for .md files from
<output-dir>  directory to output html files in, mirroring <input-dir> structure

Example:
${PROG_NAME} -i=source -o=output

Find all files with .md suffix in directory source (recursively) and create or overwrite output directory with
converted html files.
EOF
}

main () {
    check_for_dependencies
    parse_opts "$@"
    generate_html
}

check_for_dependencies () {
    # check for pandoc
    if ! command -v pandoc &>/dev/null; then
        echo "pandoc required but not found, exiting..."
        exit 1
    fi
}

parse_opts () {
    if [ $# -eq 0 ]; then
        echo "No arguments provided, exiting..."
        help_menu
        exit 1
    fi

    for arg in "$@"; do
        case "${arg}" in
            -h|--help)
                help_menu
                exit
                ;;
            -i=*|--input=*)
                INPUT_DIR="${arg#*=}"
                shift
                if [ ! -d "${INPUT_DIR}" ]; then
                    echo "Invalid input directory: ${INPUT_DIR}"
                    exit 1
                fi
                ;;
            -o=*|--output=*)
                OUTPUT_DIR="${arg#*=}"
                shift
                ;;
            *)
                echo "Bad argument: ${arg}"
                help_menu
                exit 1
                ;;
        esac
    done
}

generate_html () {
    # get all the markdown files we need to convert
    mapfile -t INPUT_FILES < <(find "${INPUT_DIR}" -name "*.md")

    # clear any stale outputs
    find "${OUTPUT_DIR}" -name "*.html" -type f -delete

    # process and convert each input file
    for INPUT_FILE_PATH in "${INPUT_FILES[@]}"; do
        INPUT_PATH=$(dirname "${INPUT_FILE_PATH}")
        OUTPUT_PATH=${INPUT_PATH/$INPUT_DIR/$OUTPUT_DIR}
        INPUT_FILE=$(basename -- "${INPUT_FILE_PATH}")
        INPUT_NAME=${INPUT_FILE%.*}
        OUTPUT_FILE_PATH="${OUTPUT_PATH}/${INPUT_NAME}.html"
        mkdir -p "${OUTPUT_PATH}"
        pre_process_target "${INPUT_FILE_PATH}"
        convert_target "${OUTPUT_FILE_PATH}" "${INPUT_FILE_PATH}"
        post_process_target "${OUTPUT_FILE_PATH}"
    done
}

convert_target () {
    pandoc "${2}" \
        --output="${1}" \
        --from=markdown \
        --to=html5 \
        --css=css/main.css \
        --highlight-style=haddock \
        --standalone
}

pre_process_target () {
    # noop for now
    true
}

post_process_target () {
    update_links "${1}"
}

update_links () {
    # replace md file extension with html in href tags
    sed -i 's/href=\([^[:space:]]\+\)\.md">/href=\1\.html">/g' "${1}"
}

main "$@"
